<?xml version="1.0" encoding="UTF-8"?>
 

 
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <!-- This is our aggregation strategy for the numbers received as input -->
  <bean id="myStrategy" class="org.data.sum.NumberAggregationStrategy"/>

  <!-- This is the persistent repository to store aggregated messages -->
  <bean id="myRepo" class="org.apache.camel.component.hawtdb.HawtDBAggregationRepository">
    <!-- use data/hawtdb.dat as the persistent store -->
    <property name="persistentFileName" value="data/hawtdb.dat"/>
    <!-- the repo must have an unique name, as you can have multiple repositories in the same file -->
    <property name="repositoryName" value="myDataRepo"/>
    <!-- the repo file segment size -->
    <property name="bufferSize" value="60240"/>
  </bean>

  <!-- This is the Camel route which asks for input and aggregates incoming numbers -->
  <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
    <route>
      <!-- ask user to enter a number -->
      <from uri="stream:in?promptMessage=Enter a number to be added (enter STOP to end, and Ctrl-C to shutdown Camel): &amp;promptDelay=1000"/>
      <!-- aggregate the input, use eagerCheckCompletion to let the completionPredicate easily detect the STOP command -->
      <aggregate strategyRef="myStrategy" aggregationRepositoryRef="myRepo" eagerCheckCompletion="true">
        <!-- aggregate all messages into the same group -->
        <correlationExpression>
          <constant>true</constant>
        </correlationExpression>
        <!-- if end user enters STOP then complete the aggregation -->
        <completionPredicate>
          <simple>${body} contains 'STOP'</simple>
        </completionPredicate>
        <!-- and transform the completed message as readable -->
        <transform>
          <simple>The result is: ${body}</simple>
        </transform>
        <!-- then printed the result on the console -->
        <to uri="stream:out"/>
      </aggregate>
    </route>

  </camelContext>

</beans>
   